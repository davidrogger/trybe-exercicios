// FaÃ§a as modificaÃ§Ãµes necessÃ¡rias na funÃ§Ã£o para que o seu comportamento respeite o escopo no qual cada variÃ¡vel foi declarada.
// Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function .
// Modifique as concatenaÃ§Ãµes para template literals .
// Copie o cÃ³digo abaixo.

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
// }

// testingScope(true);

// const testingScope = (escopo) => {
//   if (escopo === true) {
//     let ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = `${ifScope} Ã³timo, fui utilizada no escopo !`;
//     console.log(ifScope);
//   } else {
//     let elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }  
// }

// testingScope(true);


// Parte I
// Utilize template literals para que a chamada console.log(<seu cÃ³digo>oddsAndEvens<seu cÃ³digo>); retorne "Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// BÃ´nus (opcional): tente fazer o mesmo exercÃ­cio utilizando o mÃ©todo array.sort() . Spoiler: Ã‰ possÃ­vel realizar uma funÃ§Ã£o que ordene qualquer array de nÃºmeros.

// sort() https://www.youtube.com/watch?v=N4G7XtU75kU

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];


// console.log(`Filtro array crescente ${oddsAndEvens.sort((a,b) => a - b)}`); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰

// Parte II
// recursividade https://www.youtube.com/watch?v=NKymAD4pJZI

// const fatorial = (n) => {
//   let result = n;
//   for(let cont = (n - 1); cont >= 1; cont -= 1) {
//     result = result * cont;
//   }
//   return result;
// }

// console.log(fatorial(5));

// const fatorial = number => number > 1 ? number * fatorial(number - 1) : 1;

// console.log(fatorial(5));

// const biggerWord = phrase => {
//   const splitPhras = phrase.split(' ');
//   let biggerWordArray = splitPhras[0];
//   for(let index = 0; index < splitPhras.length; index += 1) {
//     if(biggerWordArray.length < splitPhras[index].length) {
//       biggerWordArray = splitPhras[index];
//     }    
//   }
//   return biggerWordArray;
// }

// console.log(biggerWord('qual sera a palavra maior aqui =P'));

// Requisito 4
// Crie um cÃ³digo JavaScript com a seguinte especificaÃ§Ã£o:
// NÃ£o se esqueÃ§a de usar template literals
// FunÃ§Ã£o 1 : Escreva uma funÃ§Ã£o que vai receber uma string como parÃ¢metro. Sua funÃ§Ã£o deverÃ¡ procurar pela letra x em uma string qualquer que vocÃª determinar e substituir pela string que vocÃª passou como parÃ¢metro. Sua funÃ§Ã£o deve retornar essa nova string .

// const xWord = word => `Tryber ${word} aqui!`

// console.log(xWord('dale'));

// Um array com escopo global, que Ã© o escopo do arquivo JS , nesse caso, contendo cinco strings com suas principais skills .

// const skills = ['html', 'css', 'javascript', 'unix', 'play'];

